// See https://aka.ms/new-console-template for more information
Console.WriteLine("\n\tCalculator - it just adds up\n\n");

/*
 * Name Don Welch
 * Last Modified Oct 11 2024
 * 
 * this demo will cover the do-while loop
 * it will demonstrate a menu selection
 * a) Addition
 * b) Subtraction
 * c) Multiplication
 * d) Division
 * x) exit
 * 
 * the user will be asked to chose an option,
 * depending on the option, the calculation will be performed
 * the program will continue until the use selects exit
 * the program will demonstration esception handling of errors instead of
 *      defensive programing
 */

string inputValue = "";
char menuChoice = ' ';
int firstNumber = 0;
int secondNumber = 0;
double calculatedResult = 0.0;
Random rnd = new Random(); //create an instance of the Random number generator
bool validFlag = false;
int userGuessInteger = 0;
double userGuessDivision = 0.0;

//do while loop
//post test structure which means the loop will be done at least once

//syntax
//      do
//      {
//          logic/code
//      }while (condition);

do
{
    Console.WriteLine("\nYOur choices for a calculations are:");
    Console.WriteLine("a) Addition");
    Console.WriteLine("b) Subtration");
    Console.WriteLine("c) Multiplication");
    Console.WriteLine("d) Division");
    Console.WriteLine("x) Exit");
    Console.Write("Enter your calculation choice:\t");
    firstNumber = rnd.Next(0, 101); //generated a number between 0 and 100
    secondNumber = rnd.Next(0, 101);
    try
    {
        //to handle system exception (errors generated by your code) use the Try/Catch
        //the area under the try is the code you are attempting to execute
        //if a problem occurances, execution is transfer to the catch code
        //this try/catch structure allows for a "soft" landing incase of errors
        //often referred to as: user friendly error handling

        inputValue = Console.ReadLine();
        menuChoice = char.Parse(inputValue);
        Console.WriteLine($"you entered {menuChoice}");
        switch(char.ToUpper(menuChoice))
        {
            case 'A':
                {
                    //ask the user for their answer
                    //valid the incoming value to be a number
                    //continue with the query until a is given
                    do
                    {
                        validFlag = true;
                        try
                        {
                            Console.Write($"\nWhat is the answer to {firstNumber} + {secondNumber}:\t");
                            userGuessInteger = int.Parse(Console.ReadLine());
                        }
                        catch(Exception ex)
                        {
                            Console.WriteLine($"\n\tInput error: {ex.Message}");
                            validFlag = false;
                        }
                    } while (!validFlag);
                    calculatedResult = firstNumber + secondNumber;

                    //test to see if the user guessed correctly
                    if (userGuessInteger == calculatedResult)
                    {
                        Console.WriteLine($"\n\tYour guess of {userGuessInteger} is correct.");
                    }
                    else
                    {
                        Console.WriteLine($"\n\tYour guess of {userGuessInteger} is incorrect.");
                    }
                    break;
                }
            case 'B':
                {
                    //ask the user for their answer
                    //valid the incoming value to be a number
                    //continue with the query until a is given
                    do
                    {
                        validFlag = true;
                       
                        Console.Write($"\nWhat is the answer to {firstNumber} - {secondNumber}:\t");
                        inputValue = Console.ReadLine();
                        if(!int.TryParse(inputValue,  out userGuessInteger))
                        {
                            Console.WriteLine($"\n\tInput error: >{inputValue}< is not a number");
                            validFlag = false;
                        }
                       
                    } while (!validFlag);
                    calculatedResult = firstNumber - secondNumber;

                    //test to see if the user guessed correctly
                    if (userGuessInteger == calculatedResult)
                    {
                        Console.WriteLine($"\n\tYour guess of {userGuessInteger} is correct.");
                    }
                    else
                    {
                        Console.WriteLine($"\n\tYour guess of {userGuessInteger} is incorrect.");
                    }
                    break;
                }
            case 'C':
                {
                    //ask the user for their answer
                    //valid the incoming value to be a number
                    //continue with the query until a is given
                    do
                    {
                        validFlag = true;

                        Console.Write($"\nWhat is the answer to {firstNumber} X {secondNumber}:\t");
                        inputValue = Console.ReadLine();
                        if (!int.TryParse(inputValue, out userGuessInteger))
                        {
                            Console.WriteLine($"\n\tInput error: >{inputValue}< is not a number");
                            validFlag = false;
                        }

                    } while (!validFlag);
                    calculatedResult = firstNumber * secondNumber;

                    //test to see if the user guessed correctly
                    if (userGuessInteger == calculatedResult)
                    {
                        Console.WriteLine($"\n\tYour guess of {userGuessInteger} is correct.");
                    }
                    else
                    {
                        Console.WriteLine($"\n\tYour guess of {userGuessInteger} is incorrect.");
                    }
                    break;
                }
            default:
                {
                    Console.WriteLine($"\n\tYour menu choice of {menuChoice} is invalid. Try again. ");
                    break;
                }
        }
    }
    catch(Exception ex)
    {
        //output a message to the user about the exception (problem)
        //using the generic caught class for execptions: Exception
        Console.WriteLine($"\n\tError: {ex.Message}");
    }
} while (char.ToUpper(menuChoice) != 'X');
